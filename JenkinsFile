pipeline {

    agent {
        node {
            label 'master'
        }
    }
    options {
        buildDiscarder logRotator( 
                    daysToKeepStr: '16', 
                    numToKeepStr: '10'
            )
    }

    stages {

        stage('Setup Environment for APICTL') {
            steps {
                sh '''#!/bin/bash
                apictl set --vcs-source-repo-path /var/lib/jenkins/workspace/CICD-Dev_dev
                apictl set --vcs-config-path /var/lib/jenkins/workspace/gitconfig
                envs=$(apictl get envs --format "{{.Name}}")
                if [ -z "$envs" ]; 
                then 
                    echo "No environments configured. Setting the dev environment.."
                    apictl add env dev --apim https://${APIM_HOST}:9443
                else
                    echo "Environments :"$envs
                    if [[ $envs != *"dev"* ]]; then
                    echo "Dev environment is not configured. Setting the dev environment.."
                    apictl add env dev --apim https://${APIM_HOST}:9443 
                    fi
                fi
                '''
            }
        }

        stage('Bundle and upload deployment artifacts') {
            steps {
                sh '''#!/bin/bash
                # Login to the dev environment
                apictl login dev -u admin -p admin -k
                # Check status of changed projects
                apis=$(apictl vcs status -e dev --format="{{ jsonPretty . }}" | jq -r '.API | .[] | .NickName')
                mkdir -p upload
                if [ -z "$apis" ]; 
                then 
                    echo "========== No API Changes detected =========="; 
                else 
                    echo "Updated APIs :"$apis
                    apiArray=($apis)
                    for i in "${apiArray[@]}"
                    do
                        echo "$i"
                        # Bundle the api artifacts to upload to artifactory
                        apictl bundle -s $i -d upload

                        # Get the artifact deploy version from the meta.yaml
                        versionFull=$(cat $i/meta.yaml)
                        versionId=(${versionFull//: / })
                        version=${versionId[1]}

                        # Upload the file to artifactory
                        for file in upload/*; do
                            echo "Uploading "$file
                            curl -u ${ARTIFACTORY_USER}:${ARTIFACTORY_PWD} -X PUT https://${ARTIFACTORY_HOST}/artifactory/${ARTIFACTORY_REPO}/$i/$version/ -T $file
                        done
                        rm -rf upload
                    done
                fi
                '''
            }
        }

        stage('Update local repo') {
            steps {
                sh '''#!/bin/bash
                idFull=$(cat vcs.yaml)
                arrId=(${idFull//: / })
                repoId=${arrId[1]}
                head=$(git rev-parse HEAD)
                rm /var/lib/jenkins/workspace/gitconfig
                echo "
                    repos:
                    $repoId:
                        environments:
                        dev:
                            lastAttemptedRev: $head" >> /var/lib/jenkins/workspace/gitconfig
                                    '''
            }
        }        
    }

    post { 
        always { 
            sh '''
            # Logout from the dev environment
            apictl logout dev -k
            '''
        }
    }
}
